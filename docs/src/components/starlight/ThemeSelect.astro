---
import { buttonVariants } from '~/registry/new-york-v4/ui/button'
---

<starlight-shadcn-ng-theme-select>
  <button
    aria-label={Astro.locals.t('themeSelect.accessibleLabel')}
    aria-live="polite"
    class={buttonVariants({
      variant: 'ghost',
      size: 'icon',
    })}
    title={Astro.locals.t('themeSelect.accessibleLabel')}
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="size-4.5"
    >
      <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
      <path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"></path>
      <path d="M12 3l0 18"></path>
      <path d="M12 9l4.65 -4.65"></path>
      <path d="M12 14.3l7.37 -7.37"></path>
      <path d="M12 19.6l8.85 -8.85"></path>
    </svg>
    <span class="sr-only">Toggle theme</span>
  </button>
</starlight-shadcn-ng-theme-select>

{/* Inlined to avoid FOUC. Uses global scope from `ThemeProvider.astro` */}
<script is:inline>
  StarlightThemeProvider.updatePickers()
</script>

<script>
  type Theme = 'auto' | 'dark' | 'light'

  /** Key in `localStorage` to store color theme preference at. */
  const storageKey = 'starlight-theme'

  /** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
  function parseTheme(theme: unknown): Theme {
    return theme === 'auto' || theme === 'dark' || theme === 'light' ? theme : 'auto'
  }

  /** Load the user’s preference from `localStorage`. */
  function loadTheme(): Theme {
    return parseTheme(typeof localStorage !== 'undefined' && localStorage.getItem(storageKey))
  }

  /** Store the user’s preference in `localStorage`. */
  function storeTheme(theme: Theme): void {
    if (typeof localStorage !== 'undefined') {
      localStorage.setItem(storageKey, theme === 'light' || theme === 'dark' ? theme : '')
    }
  }

  /** Get the preferred system color scheme. */
  function getPreferredColorScheme(): Theme {
    return matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark'
  }

  /** Update select menu UI, document theme, and local storage state. */
  function onThemeChange(theme: Theme): void {
    StarlightThemeProvider.updatePickers(theme)
    document.documentElement.classList.remove('light', 'dark')
    const appliedTheme = theme === 'auto' ? getPreferredColorScheme() : theme
    document.documentElement.classList.add(appliedTheme)
    storeTheme(theme)
  }

  // React to changes in system color scheme.
  matchMedia(`(prefers-color-scheme: light)`).addEventListener('change', () => {
    if (loadTheme() === 'auto') onThemeChange('auto')
  })

  customElements.define(
    'starlight-shadcn-ng-theme-select',
    class StarlightRapideThemeSelect extends HTMLElement {
      constructor() {
        super()
        onThemeChange(loadTheme())
        const button = this.querySelector('button')
        button?.addEventListener('click', () => {
          const html = document.documentElement
          let theme: Theme = 'auto'
          if (html.classList.contains('dark')) theme = 'dark'
          else if (html.classList.contains('light')) theme = 'light'
          const newTheme = theme === 'dark' ? 'light' : theme === 'light' ? 'dark' : 'auto'
          onThemeChange(newTheme)
          button?.setAttribute('aria-label', `${newTheme} theme`)
        })
      }
    },
  )
</script>
