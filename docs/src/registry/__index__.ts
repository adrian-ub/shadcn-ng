// eslint-disable-next-line ts/ban-ts-comment
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import type { EnvironmentInjector } from '@angular/core'
import { createComponent } from '@angular/core'

export const Index: Record<string, any> = {
  'index': {
    name: 'index',
    description: '',
    type: 'registry:style',
    registryDependencies: ['utils'],
    files: [],
    component: null,
    categories: undefined,
    meta: undefined,
  },
  'accordion': {
    name: 'accordion',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/accordion.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/accordion.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'alert': {
    name: 'alert',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/alert.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/alert.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'aspect-ratio': {
    name: 'aspect-ratio',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/aspect-ratio.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/aspect-ratio.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'avatar': {
    name: 'avatar',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/avatar.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/avatar.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'badge': {
    name: 'badge',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/badge.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/badge.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'breadcrumb': {
    name: 'breadcrumb',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/breadcrumb.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/breadcrumb.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'button': {
    name: 'button',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/button.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/button.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'card': {
    name: 'card',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/card.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/card.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'collapsible': {
    name: 'collapsible',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/collapsible.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/collapsible.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'dialog': {
    name: 'dialog',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/dialog.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/dialog.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'dropdown-menu': {
    name: 'dropdown-menu',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/dropdown-menu.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/dropdown-menu.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'hover-card': {
    name: 'hover-card',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/hover-card.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/hover-card.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'input': {
    name: 'input',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/input.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/input.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'label': {
    name: 'label',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/label.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/label.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'separator': {
    name: 'separator',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/separator.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/ui/separator.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
  'utils': {
    name: 'utils',
    description: '',
    type: 'registry:lib',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/lib/utils.ts',
      type: 'registry:lib',
      target: '',
    }],
    component: async (environmentInjector: EnvironmentInjector) => {
      const mod = await import('~/registry/new-york-v4/lib/utils.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return createComponent(mod[exportName as keyof typeof mod], {
        environmentInjector,
      })
    },
    categories: undefined,
    meta: undefined,
  },
}
