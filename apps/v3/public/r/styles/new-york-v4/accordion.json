{
  "$schema": "https://ui.adrianub.dev/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/new-york-v4/ui/accordion.ts",
      "content": "import type { ClassValue } from 'clsx'\nimport { Component, computed, Directive, input } from '@angular/core'\n\nimport { lucideChevronDown, NgxiLucide } from '@ngxi/lucide'\nimport {\n  RdxAccordionContentDirective,\n  RdxAccordionHeaderDirective,\n  RdxAccordionItemDirective,\n  RdxAccordionRootDirective,\n  RdxAccordionTriggerDirective,\n} from '@radix-ng/primitives/accordion'\n\nimport { cn } from '@/lib/utils'\n\n@Directive({\n  standalone: true,\n  selector: '[ubAccordion]',\n  hostDirectives: [\n    {\n      directive: RdxAccordionRootDirective,\n      inputs: ['dir', 'disabled', 'orientation', 'defaultValue', 'value', 'collapsible', 'type'],\n      outputs: ['onValueChange'],\n    },\n  ],\n  host: {\n    'data-slot': 'accordion',\n  },\n})\nexport class UbAccordionDirective { }\n\n@Directive({\n  standalone: true,\n  selector: '[ubAccordionItem]',\n  hostDirectives: [\n    {\n      directive: RdxAccordionItemDirective,\n      inputs: ['disabled', 'value'],\n    },\n  ],\n  host: {\n    '[class]': 'computedClass()',\n    'data-slot': 'accordion-item',\n  },\n})\nexport class UbAccordionItemDirective {\n  readonly class = input<ClassValue>()\n  protected readonly computedClass = computed(() => {\n    return cn('border-b last:border-b-0', this.class())\n  })\n}\n\n@Component({\n  standalone: true,\n  selector: '[ubAccordionTrigger], ub-accordion-trigger',\n  imports: [RdxAccordionHeaderDirective, NgxiLucide, RdxAccordionTriggerDirective],\n  template: `\n    <h3 rdxAccordionHeader class=\"flex\">\n        <button [class]=\"computedClass()\" rdxAccordionTrigger data-slot=\"accordion-trigger\">\n            <ng-content></ng-content>\n            <svg [ngxiLucide]=\"lucideChevronDown\" class=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\">\n            </svg>\n        </button>\n    </h3>\n    `,\n})\nexport class UbAccordionTriggerDirective {\n  protected readonly lucideChevronDown = lucideChevronDown\n  readonly class = input<ClassValue>()\n  protected readonly computedClass = computed(() => {\n    return cn('focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180', this.class())\n  })\n}\n\n@Component({\n  standalone: true,\n  selector: '[ubAccordionContent], ub-accordion-content',\n  hostDirectives: [RdxAccordionContentDirective],\n  host: {\n    'data-slot': 'accordion-content',\n    'class':\n      'data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm',\n  },\n  template: `\n        <div [className]=\"computedClass()\">\n            <ng-content></ng-content>\n        </div>\n    `,\n})\nexport class UbAccordionContentDirective {\n  readonly class = input<ClassValue>()\n  protected readonly computedClass = computed(() => {\n    return cn('pt-0 pb-4', this.class())\n  })\n}\n",
      "type": "registry:ui"
    }
  ]
}
