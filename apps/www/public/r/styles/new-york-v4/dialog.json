{
  "$schema": "https://ui.adrianub.dev/schema/registry-item.json",
  "name": "dialog",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ng/primitives"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/ui/dialog.ts",
      "content": "import type { TemplateRef } from '@angular/core'\nimport type { RdxDialogConfig } from '@radix-ng/primitives/dialog'\nimport { Component, computed, Directive, effect, inject, input } from '@angular/core'\nimport { NgIconComponent, provideIcons } from '@ng-icons/core'\nimport { lucideX } from '@ng-icons/lucide'\n\nimport {\n  RdxDialogCloseDirective,\n  RdxDialogContentDirective,\n  RdxDialogDescriptionDirective,\n  RdxDialogTitleDirective,\n  RdxDialogTriggerDirective,\n} from '@radix-ng/primitives/dialog'\nimport { cn } from '~/lib/utils'\n\n@Directive({\n  standalone: true,\n  selector: 'button[ubDialogClose]',\n  hostDirectives: [RdxDialogCloseDirective],\n})\nexport class UbDialogCloseDirective {}\n\n@Directive({\n  standalone: true,\n  selector: '[ubDialogTrigger]',\n  hostDirectives: [\n    {\n      directive: RdxDialogTriggerDirective,\n      inputs: ['rdxDialogTrigger: ubDialogTrigger'],\n    },\n  ],\n})\nexport class UbDialogTriggerDirective {\n  rdxDialogTrigger = inject(RdxDialogTriggerDirective, { host: true })\n  ubDialogTrigger = input.required<TemplateRef<void>>()\n  ubDialogConfig = input<RdxDialogConfig<unknown>>()\n\n  passingConfig = effect(() => {\n    this.rdxDialogTrigger.dialogConfig = {\n      ...this.ubDialogConfig(),\n      content: this.ubDialogTrigger(),\n      backdropClass: ['data-[state=open]:animate-in', 'data-[state=closed]:animate-out', 'data-[state=closed]:fade-out-0', 'data-[state=open]:fade-in-0', 'fixed', 'inset-0', 'z-50', 'bg-black/80'],\n    }\n  })\n}\n\n@Component({\n  standalone: true,\n  selector: '[ubDialogContent]',\n  imports: [RdxDialogCloseDirective, NgIconComponent],\n  host: {\n    '[class]': 'computedClass()',\n  },\n  hostDirectives: [\n    {\n      directive: RdxDialogContentDirective,\n    },\n  ],\n  viewProviders: [provideIcons({ lucideX })],\n  template: `\n  <ng-content />\n\n  <button class=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\" rdxDialogClose>\n    <ng-icon name=\"lucideX\" />\n    <span class=\"sr-only\">Close</span>\n  </button>\n  `,\n})\nexport class UbDialogContentDirective {\n  class = input<string>()\n  computedClass = computed(() => cn('bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg', this.class()))\n}\n\n@Directive({\n  standalone: true,\n  selector: 'div[ubDialogHeader]',\n  host: {\n    '[class]': 'computedClass()',\n  },\n})\nexport class UbDialogHeaderDirective {\n  class = input<string>()\n  computedClass = computed(() => cn('flex flex-col gap-2 text-center sm:text-left', this.class()))\n}\n\n@Directive({\n  standalone: true,\n  selector: 'div[ubDialogFooter]',\n  host: {\n    '[class]': 'computedClass()',\n  },\n})\nexport class UbDialogFooterDirective {\n  class = input<string>()\n  computedClass = computed(() => cn('flex flex-col-reverse gap-2 sm:flex-row sm:justify-end', this.class()))\n}\n\n@Directive({\n  standalone: true,\n  selector: 'h2[ubDialogTitle]',\n  host: {\n    '[class]': 'computedClass()',\n  },\n  hostDirectives: [RdxDialogTitleDirective],\n})\nexport class UbDialogTitleDirective {\n  class = input<string>()\n  computedClass = computed(() => cn('text-lg leading-none font-semibold', this.class()))\n}\n\n@Directive({\n  standalone: true,\n  selector: 'p[ubDialogDescription]',\n  host: {\n    '[class]': 'computedClass()',\n  },\n  hostDirectives: [RdxDialogDescriptionDirective],\n})\nexport class UbDialogDescriptionDirective {\n  class = input<string>()\n  computedClass = computed(() => cn('text-muted-foreground text-sm', this.class()))\n}\n",
      "type": "registry:ui"
    }
  ]
}
