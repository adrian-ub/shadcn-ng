// eslint-disable-next-line ts/ban-ts-comment
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

export const Index: Record<string, any> = {
  'index': {
    name: 'index',
    description: '',
    type: 'registry:style',
    registryDependencies: ['utils'],
    files: [],
    component: null,
    categories: undefined,
    meta: undefined,
  },
  'style': {
    name: 'style',
    description: '',
    type: 'registry:style',
    registryDependencies: ['utils'],
    files: [],
    component: null,
    categories: undefined,
    meta: undefined,
  },
  'accordion': {
    name: 'accordion',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/accordion.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async () => {
      const mod = await import('@/registry/new-york-v4/ui/accordion.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return mod[exportName as keyof typeof mod]
    },
    categories: undefined,
    meta: undefined,
  },
  'alert': {
    name: 'alert',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/alert.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async () => {
      const mod = await import('@/registry/new-york-v4/ui/alert.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return mod[exportName as keyof typeof mod]
    },
    categories: undefined,
    meta: undefined,
  },
  'aspect-ratio': {
    name: 'aspect-ratio',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/aspect-ratio.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async () => {
      const mod = await import('@/registry/new-york-v4/ui/aspect-ratio.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return mod[exportName as keyof typeof mod]
    },
    categories: undefined,
    meta: undefined,
  },
  'badge': {
    name: 'badge',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/badge.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async () => {
      const mod = await import('@/registry/new-york-v4/ui/badge.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return mod[exportName as keyof typeof mod]
    },
    categories: undefined,
    meta: undefined,
  },
  'button': {
    name: 'button',
    description: '',
    type: 'registry:ui',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/ui/button.ts',
      type: 'registry:ui',
      target: '',
    }],
    component: async () => {
      const mod = await import('@/registry/new-york-v4/ui/button.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return mod[exportName as keyof typeof mod]
    },
    categories: undefined,
    meta: undefined,
  },
  'utils': {
    name: 'utils',
    description: '',
    type: 'registry:lib',
    registryDependencies: undefined,
    files: [{
      path: 'registry/new-york-v4/lib/utils.ts',
      type: 'registry:lib',
      target: '',
    }],
    component: async () => {
      const mod = await import('@/registry/new-york-v4/lib/utils.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return mod[exportName as keyof typeof mod]
    },
    categories: undefined,
    meta: undefined,
  },
  'accordion-demo': {
    name: 'accordion-demo',
    description: '',
    type: 'registry:example',
    registryDependencies: [],
    files: [{
      path: 'registry/new-york-v4/examples/accordion-demo.ts',
      type: 'registry:example',
      target: '',
    }],
    component: async () => {
      const mod = await import('@/registry/new-york-v4/examples/accordion-demo.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return mod[exportName as keyof typeof mod]
    },
    categories: undefined,
    meta: undefined,
  },
  'alert-demo': {
    name: 'alert-demo',
    description: '',
    type: 'registry:example',
    registryDependencies: [],
    files: [{
      path: 'registry/new-york-v4/examples/alert-demo.ts',
      type: 'registry:example',
      target: '',
    }],
    component: async () => {
      const mod = await import('@/registry/new-york-v4/examples/alert-demo.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return mod[exportName as keyof typeof mod]
    },
    categories: undefined,
    meta: undefined,
  },
  'aspect-ratio-demo': {
    name: 'aspect-ratio-demo',
    description: '',
    type: 'registry:example',
    registryDependencies: [],
    files: [{
      path: 'registry/new-york-v4/examples/aspect-ratio-demo.ts',
      type: 'registry:example',
      target: '',
    }],
    component: async () => {
      const mod = await import('@/registry/new-york-v4/examples/aspect-ratio-demo.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return mod[exportName as keyof typeof mod]
    },
    categories: undefined,
    meta: undefined,
  },
  'badge-demo': {
    name: 'badge-demo',
    description: '',
    type: 'registry:example',
    registryDependencies: [],
    files: [{
      path: 'registry/new-york-v4/examples/badge-demo.ts',
      type: 'registry:example',
      target: '',
    }],
    component: async () => {
      const mod = await import('@/registry/new-york-v4/examples/badge-demo.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return mod[exportName as keyof typeof mod]
    },
    categories: undefined,
    meta: undefined,
  },
  'button-demo': {
    name: 'button-demo',
    description: '',
    type: 'registry:example',
    registryDependencies: [],
    files: [{
      path: 'registry/new-york-v4/examples/button-demo.ts',
      type: 'registry:example',
      target: '',
    }],
    component: async () => {
      const mod = await import('@/registry/new-york-v4/examples/button-demo.ts')
      const exportName = Object.keys(mod).find((key) => {
        const value = (mod as Record<string, unknown>)[key]
        return typeof value === 'function' && value.prototype && value.prototype.constructor === value
      })
      return mod[exportName as keyof typeof mod]
    },
    categories: undefined,
    meta: undefined,
  },
}
