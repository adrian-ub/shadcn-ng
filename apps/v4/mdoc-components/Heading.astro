---
import type { HTMLAttributes } from 'astro/types'
// These styles are included globally by default, but can be removed when `markdown.headingLinks` is
// set to `false`. We import them here to ensure they are included if the component is used with the
// global Markdown option disabled.
import { AstroError } from 'astro/errors'
import { cn } from '@/lib/utils'

const headingLevels = [1, 2, 3, 4, 5, 6, '1', '2', '3', '4', '5', '6'] as const
interface Props extends HTMLAttributes<'h1'> {
  level: 1 | 2 | 3 | 4 | 5 | 6 | `${1 | 2 | 3 | 4 | 5 | 6}`
  id: string
}

const { level, id, ...attrs } = Astro.props

if (!id) {
  throw new AstroError(
    'Missing `id` attribute passed to `<AnchorHeading>` component',
    `The \`<AnchorHeading>\` component requires an \`id\` attribute, but received \`${typeof id === 'string' ? '""' : id}\`.`,
  )
}
if (!headingLevels.includes(level)) {
  throw new AstroError(
    'Invalid `level` attribute passed to `<AnchorHeading>` component',
    `The \`<AnchorHeading>\` component expects a \`level\` attribute of \`1 | 2 | 3 | 4 | 5 | 6\`, but received \`${level}\`.`,
  )
}

const HeadingElement = `h${level}` as const
const headingHTML = await Astro.slots.render('default')
const classesHeading = {
  1: 'mt-2 scroll-m-28 text-3xl font-bold tracking-tight',
  2: 'mt-8 scroll-m-28 text-xl font-medium tracking-tight first:mt-0 lg:mt-8 [&+p]:!mt-4 *:[code]:text-xl',
  3: 'mt-8 scroll-m-28 text-lg font-medium tracking-tight *:[code]:text-xl',
  4: 'mt-8 scroll-m-28 text-base font-medium tracking-tight',
  5: 'mt-8 scroll-m-28 text-base font-medium tracking-tight',
  6: 'mt-8 scroll-m-28 text-base font-medium tracking-tight',
}
---

<HeadingElement {id} class={cn(classesHeading[level], Astro.props.class)} {...attrs} set:html={headingHTML} />
